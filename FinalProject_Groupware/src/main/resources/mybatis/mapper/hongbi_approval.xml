<?xml version="1.0" encoding="UTF-8"?>


<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.med.approval.model.ApprovalDAO">

	<!-- ==== 결재선 목록에 선택한 사원 추가하기 / 기안자 정보 불러오기 ==== -->
	<select id="insertToApprovalLine" parameterType="String" resultType="ApprovalVO">
		select parent_dept_name, child_dept_name, member_position, member_name, member_userid
			from tbl_parent_dept p join tbl_child_dept c
		on p.parent_dept_no = c.fk_parent_dept_no
		left join tbl_member m
		on c.child_dept_no = m.fk_child_dept_no
		where member_userid = #{member_userid}
	</select>
	
	
	<!-- ==== 결재선 결재순위 지정 ==== -->
	<resultMap type="HashMap" id="orderByApprovalStep_Map">
		<result property="member_step" 	column="member_step" 		javaType="String" />
		<result property="member_position" 	column="member_position" 	javaType="String" />
		<result property="child_dept_name" 	column="child_dept_name" 	javaType="String" />
		<result property="member_name" 		column="member_name" 		javaType="String" />
		<result property="member_userid" 	column="member_userid" 		javaType="String" />
	</resultMap>
	<select id="orderByApprovalStep" resultMap="orderByApprovalStep_Map" parameterType="String">
		select DENSE_RANK() over (order by member_grade desc, member_start desc) as member_step
		     , member_position
		     , child_dept_name
		     , member_name
		     , member_userid
		from  tbl_child_dept c join tbl_member m
		on c.child_dept_no = m.fk_child_dept_no 
		where member_userid in
		<foreach collection="arr_approvalLineMembers" index="i" open="(" separator="," close=")">
			${arr_approvalLineMembers[i]}
		</foreach>
	</select>
	
	
	<!-- ==== 참조자 목록 순서 지정 ==== -->
	<resultMap type="HashMap" id="orderByReferenceMembers_Map">
		<result property="member_step" 	column="member_step" 		javaType="String" />
		<result property="parent_dept_name" 	column="parent_dept_name" 	javaType="String" />
		<result property="child_dept_name" 	column="child_dept_name" 	javaType="String" />
		<result property="member_position" 	column="member_position" 	javaType="String" />
		<result property="member_name" 		column="member_name" 		javaType="String" />
		<result property="member_userid" 	column="member_userid" 		javaType="String" />
	</resultMap>
	<select id="orderByReferenceMembers" resultMap="orderByReferenceMembers_Map" parameterType="String">
		select DENSE_RANK() over (order by member_grade asc, member_start asc) as member_step
		     , parent_dept_name
		     , child_dept_name
		     , member_position
		     , member_name
		     , member_userid
		from tbl_parent_dept p join tbl_child_dept c
		on p.parent_dept_no = c.fk_parent_dept_no
		left join tbl_member m
		on c.child_dept_no = m.fk_child_dept_no
		where member_userid in
		<foreach collection="arr_referenceMembers" index="i" open="(" separator="," close=")">
			${arr_referenceMembers[i]}
		</foreach>
	</select>
	
	
	<!-- ==== 기존에 추가했던 결재선 사원을 목록에 불러오기 ==== -->
	<select id="insertToApprovalLine_Arr" parameterType="String" resultType="ApprovalVO">
		select parent_dept_name, child_dept_name, member_position, member_name
		from tbl_parent_dept p join tbl_child_dept c
		on p.parent_dept_no = c.fk_parent_dept_no
		left join tbl_member m
		on c.child_dept_no = m.fk_child_dept_no
		where member_userid in
		<foreach collection="arr_approvalLineMembers" index="i" open="(" separator="," close=")">
			${arr_approvalLineMembers[i]}
		</foreach>
	</select>
	
	
	<!-- ==== 기존에 추가했던 참조자 사원을 목록에 불러오기 ==== -->
	<select id="insertToReferenceMember_Arr" parameterType="String" resultType="ApprovalVO">
		select parent_dept_name, child_dept_name, member_position, member_name
		from tbl_parent_dept p join tbl_child_dept c
		on p.parent_dept_no = c.fk_parent_dept_no
		left join tbl_member m
		on c.child_dept_no = m.fk_child_dept_no
		where member_userid in
		<foreach collection="arr_referenceMembers" index="i" open="(" separator="," close=")">
			${arr_referenceMembers[i]}
		</foreach>
	</select>
	
	
	<!-- ==== 문서번호 생성 ==== -->
	<select id="createDraftNo" resultType="String">
		select to_char(sysdate, 'yyyymmdd') || lpad(seq_draft_no.nextval, 4, 0) as drat_no
		from dual
	</select>


	<!-- ==== 잔여 연차 조회 ==== -->
	<select id="leftoverYeoncha" resultType="String" parameterType="String">
		select member_yeoncha 
		from tbl_member
		where member_userid = to_number(#{member_userid})
	</select>
	
	
	<!-- /////////////////////////////////////////////////// -->
	<!-- ==== 기안문 임시저장하기 [insert] ==== -->
	<!-- >>> 1. (TBL_DRAFT)기안문서 테이블에 insert <<< -->
	<insert id="insertToTemporaryStored_TBL_DRAFT" parameterType="HashMap">
		insert into tbl_draft(DRAFT_NO, FK_MEMBER_USERID, DRAFT_FORM_TYPE, DRAFT_SUBJECT, DRAFT_WRITE_DATE, DRAFT_STATUS, DRAFT_URGENT, DRAFT_SAVED, DRAFT_FILE_ORIGIN_NAME, DRAFT_FILE_NAME, DRAFT_FILE_SIZE)
		values(#{draft_no}, to_number(#{fk_member_userid}), #{draft_form_type}, #{draft_subject}, TO_DATE(#{draft_write_date}, 'YYYY/MM/DD'), '임시저장', to_number(#{draft_urgent}), 1, default, default, default)
	</insert>
	<insert id="insertToTemporaryStored_TBL_DRAFT_Submit" parameterType="HashMap">
		insert into tbl_draft(DRAFT_NO, FK_MEMBER_USERID, DRAFT_FORM_TYPE, DRAFT_SUBJECT, DRAFT_WRITE_DATE, DRAFT_STATUS, DRAFT_URGENT, DRAFT_SAVED, DRAFT_FILE_ORIGIN_NAME, DRAFT_FILE_NAME, DRAFT_FILE_SIZE)
		values(#{draft_no}, to_number(#{fk_member_userid}), #{draft_form_type}, #{draft_subject}, TO_DATE(#{draft_write_date}, 'YYYY/MM/DD'), '대기', to_number(#{draft_urgent}), 0, default, default, default)
	</insert>
	<!-- >>> 1. (TBL_DRAFT)기안문서 테이블에 insert_withFile <<< -->
	<insert id="insertToTemporaryStored_TBL_DRAFT_withFile" parameterType="HashMap">
		insert into tbl_draft(DRAFT_NO, FK_MEMBER_USERID, DRAFT_FORM_TYPE, DRAFT_SUBJECT, DRAFT_WRITE_DATE, DRAFT_STATUS, DRAFT_URGENT, DRAFT_SAVED, DRAFT_FILE_ORIGIN_NAME, DRAFT_FILE_NAME, DRAFT_FILE_SIZE)
		values(#{draft_no}, to_number(#{fk_member_userid}), #{draft_form_type}, #{draft_subject}, TO_DATE(#{draft_write_date}, 'YYYY/MM/DD'), '임시저장', to_number(#{draft_urgent}), 1, #{draft_file_origin_name}, #{draft_file_name}, #{draft_file_size})
	</insert>
	<insert id="insertToTemporaryStored_TBL_DRAFT_withFile_Submit" parameterType="HashMap">
		insert into tbl_draft(DRAFT_NO, FK_MEMBER_USERID, DRAFT_FORM_TYPE, DRAFT_SUBJECT, DRAFT_WRITE_DATE, DRAFT_STATUS, DRAFT_URGENT, DRAFT_SAVED, DRAFT_FILE_ORIGIN_NAME, DRAFT_FILE_NAME, DRAFT_FILE_SIZE)
		values(#{draft_no}, to_number(#{fk_member_userid}), #{draft_form_type}, #{draft_subject}, TO_DATE(#{draft_write_date}, 'YYYY/MM/DD'), '대기', to_number(#{draft_urgent}), 0, #{draft_file_origin_name}, #{draft_file_name}, #{draft_file_size})
	</insert>
	
	<!-- >>> 2. 기안문 양식 테이블에 insert <<< -->
	<!-- [휴가신청서] 테이블에 insert -->
	<insert id="insertToTemporaryStored_TBL_DAY_LEAVE" parameterType="HashMap">
		insert into tbl_day_leave(DAY_LEAVE_NO, FK_DRAFT_NO, DAY_LEAVE_START, DAY_LEAVE_END, DAY_LEAVE_CNT, DAY_LEAVE_REASON)
		values(seq_day_leave_no.nextval, #{draft_no}, TO_DATE(#{day_leave_start}, 'YYYY/MM/DD'), TO_DATE(#{day_leave_end}, 'YYYY/MM/DD'), #{day_leave_cnt}, #{day_leave_reason})
	</insert>
	
	<!-- >>> 3. (TBL_APPROVAL)기안결재 테이블에 insert <<< -->
	<!-- 결재선 목록에 추가한 유저 insert -->
	<insert id="insertToTemporaryStored_approvalLine1_TBL_APPROVAL" parameterType="HashMap">
	    insert into tbl_approval(APPROVAL_NO, FK_DRAFT_NO, FK_MEMBER_USERID, APPROVAL_STEP, APPROVAL_STATUS, APPROVAL_FEEDBACK, APPROVAL_DATE)
	    values(seq_approval_no.nextval, #{draft_no}, #{step1}, 1, '결재예정', null, null)
	</insert>
	<insert id="insertToTemporaryStored_approvalLine2_TBL_APPROVAL" parameterType="HashMap">
	    insert into tbl_approval(APPROVAL_NO, FK_DRAFT_NO, FK_MEMBER_USERID, APPROVAL_STEP, APPROVAL_STATUS, APPROVAL_FEEDBACK, APPROVAL_DATE)
	    values(seq_approval_no.nextval, #{draft_no}, #{step2}, 2, default, null, null)
	</insert>
	<insert id="insertToTemporaryStored_approvalLine3_TBL_APPROVAL" parameterType="HashMap">
	    insert into tbl_approval(APPROVAL_NO, FK_DRAFT_NO, FK_MEMBER_USERID, APPROVAL_STEP, APPROVAL_STATUS, APPROVAL_FEEDBACK, APPROVAL_DATE)
	    values(seq_approval_no.nextval, #{draft_no}, #{step3}, 3, default, null, null)
	</insert>

	<!-- 참조자 목록에 추가한 유저 insert -->
	<insert id="insertToTemporaryStored_referMember1_TBL_APPROVAL" parameterType="HashMap">
	    insert into tbl_approval(APPROVAL_NO, FK_DRAFT_NO, FK_MEMBER_USERID, APPROVAL_STEP, APPROVAL_STATUS, APPROVAL_FEEDBACK, APPROVAL_DATE)
	    values(seq_approval_no.nextval, #{draft_no}, #{step1}, 0, '결재예정', null, null)
	</insert>
	<insert id="insertToTemporaryStored_referMember2_TBL_APPROVAL" parameterType="HashMap">
	    insert into tbl_approval(APPROVAL_NO, FK_DRAFT_NO, FK_MEMBER_USERID, APPROVAL_STEP, APPROVAL_STATUS, APPROVAL_FEEDBACK, APPROVAL_DATE)
	    values(seq_approval_no.nextval, #{draft_no}, #{step2}, 0, default, null, null)
	</insert>
	<insert id="insertToTemporaryStored_referMember3_TBL_APPROVAL" parameterType="HashMap">
	    insert into tbl_approval(APPROVAL_NO, FK_DRAFT_NO, FK_MEMBER_USERID, APPROVAL_STEP, APPROVAL_STATUS, APPROVAL_FEEDBACK, APPROVAL_DATE)
	    values(seq_approval_no.nextval, #{draft_no}, #{step3}, 0, default, null, null)
	</insert>
	
	
	<!-- >>> 4. (결재요청 버튼)알림 테이블에 데이터 넣기 <<< -->
	<!-- 결재선 목록에 추가한 유저 알림 테이블에 insert -->
	<insert id="insert_approvalLine1_To_TBL_ALARM" parameterType="HashMap">
	    insert into tbl_alarm(alarm_no, fk_member_userid, alarm_category, alarm_cateNo, alarm_at, alarm_is_read)
		values(seq_alarm_no.nextval, #{step1}, '결재', #{draft_no}, sysdate, default)
	</insert>
	<insert id="insert_approvalLine2_To_TBL_ALARM" parameterType="HashMap">
	    insert into tbl_alarm(alarm_no, fk_member_userid, alarm_category, alarm_cateNo, alarm_at, alarm_is_read)
		values(seq_alarm_no.nextval, #{step2}, '결재', #{draft_no}, sysdate, default)
	</insert>
	<insert id="insert_approvalLine3_To_TBL_ALARM" parameterType="HashMap">
	    insert into tbl_alarm(alarm_no, fk_member_userid, alarm_category, alarm_cateNo, alarm_at, alarm_is_read)
		values(seq_alarm_no.nextval, #{step3}, '결재', #{draft_no}, sysdate, default)
	</insert>
	
	<!-- /////////////////////////////////////////////////// -->
	
	<!-- ==== 기안문 임시저장하기 [update] ==== -->
	<!-- >>> 1. (TBL_DRAFT)기안문서 테이블에 update <<< -->
	<update id="updateToTemporaryStored_TBL_DRAFT" parameterType="HashMap">
		UPDATE tbl_draft
			SET 
			    DRAFT_SUBJECT = #{draft_subject},
			    DRAFT_WRITE_DATE = TO_DATE(#{draft_write_date}, 'YYYY/MM/DD'),
			    DRAFT_STATUS = '임시저장',
			    DRAFT_URGENT = TO_NUMBER(#{draft_urgent}),
			    DRAFT_SAVED = 1,
			    DRAFT_FILE_ORIGIN_NAME = DEFAULT, 
			    DRAFT_FILE_NAME = DEFAULT,  
			    DRAFT_FILE_SIZE = DEFAULT   
			WHERE DRAFT_NO = #{draft_no}
	</update>
	<update id="updateToTemporaryStored_TBL_DRAFT_Submit" parameterType="HashMap">
		UPDATE tbl_draft
			SET 
			    DRAFT_SUBJECT = #{draft_subject},
			    DRAFT_WRITE_DATE = TO_DATE(#{draft_write_date}, 'YYYY/MM/DD'),
			    DRAFT_STATUS = '대기',
			    DRAFT_URGENT = TO_NUMBER(#{draft_urgent}),
			    DRAFT_SAVED = 0,
			    DRAFT_FILE_ORIGIN_NAME = DEFAULT, 
			    DRAFT_FILE_NAME = DEFAULT,  
			    DRAFT_FILE_SIZE = DEFAULT   
			WHERE DRAFT_NO = #{draft_no}
	</update>
	
	<!-- >>> 1. (TBL_DRAFT)기안문서 테이블에 update_withFile <<< -->
	<update id="updateToTemporaryStored_TBL_DRAFT_withFile" parameterType="HashMap">
		UPDATE tbl_draft
			SET 
			    DRAFT_SUBJECT = #{draft_subject},
			    DRAFT_WRITE_DATE = TO_DATE(#{draft_write_date}, 'YYYY/MM/DD'),
			    DRAFT_STATUS = '임시저장',
			    DRAFT_URGENT = TO_NUMBER(#{draft_urgent}),
			    DRAFT_SAVED = 1,
			    DRAFT_FILE_ORIGIN_NAME = #{draft_file_origin_name}, 
			    DRAFT_FILE_NAME = #{draft_file_name},  
			    DRAFT_FILE_SIZE = #{draft_file_size}   
			WHERE DRAFT_NO = #{draft_no}
	</update>
	<update id="updateToTemporaryStored_TBL_DRAFT_withFile_Submit" parameterType="HashMap">
		UPDATE tbl_draft
			SET 
			    DRAFT_SUBJECT = #{draft_subject},
			    DRAFT_WRITE_DATE = TO_DATE(#{draft_write_date}, 'YYYY/MM/DD'),
			    DRAFT_STATUS = '대기',
			    DRAFT_URGENT = TO_NUMBER(#{draft_urgent}),
			    DRAFT_SAVED = 0,
			    DRAFT_FILE_ORIGIN_NAME = #{draft_file_origin_name}, 
			    DRAFT_FILE_NAME = #{draft_file_name},  
			    DRAFT_FILE_SIZE = #{draft_file_size}   
			WHERE DRAFT_NO = #{draft_no}
	</update>
	
	<!-- >>> 2. 기안문 양식 테이블에 update <<< -->
	<!-- [휴가신청서] 테이블에 update -->
	<update id="updateToTemporaryStored_TBL_DAY_LEAVE" parameterType="HashMap">
		UPDATE tbl_day_leave
			SET 
			    DAY_LEAVE_START = TO_DATE(#{day_leave_start}, 'YYYY/MM/DD'),
			    DAY_LEAVE_END = TO_DATE(#{day_leave_end}, 'YYYY/MM/DD'),
			    DAY_LEAVE_CNT = #{day_leave_cnt},
			    DAY_LEAVE_REASON = #{day_leave_reason}
			WHERE FK_DRAFT_NO = #{draft_no}
	</update>
	
	<!-- >>> 3. (TBL_APPROVAL)기안결재 테이블에 insert -->
	<!-- 기존 결재선 및 참조자 삭제 delete -->
	<delete id="deleteToTemporaryStored_TBL_APPROVAL" parameterType="String">
		DELETE from tbl_approval
		where fk_draft_no = #{draft_no}
	</delete>
	
	<!-- 결재선 목록에 추가한 유저 insert -->
	
	<!-- /////////////////////////////////////////////////// -->
	
	<!-- ==== 임시저장함 기안문 불러오기 ==== -->
	<select id="selectTemporaryList" resultType="ApprovalVO" parameterType="HashMap">
		select *
		from
		(
		    with A as
		    (
		        select draft_no, to_char(draft_write_date, 'yyyy/mm/dd') as draft_write_date
		             , draft_form_type
		             , case when length(draft_subject) > 14 then substr(draft_subject, 1, 11) || '...' else draft_subject end as draft_subject
		             , draft_status, fk_member_userid, draft_file_name
		        from tbl_draft
		        where draft_saved = 1
		        <choose>
					<when test="searchType == 'draft_form_type' and searchWord != ''">
						and lower(draft_form_type) like '%' || lower(#{searchWord}) ||'%'
					</when>
					<when test="searchType == 'draft_subject' and searchWord != ''">
						and lower(draft_subject) like '%' || lower(#{searchWord}) ||'%'
					</when>
					<otherwise></otherwise>
				</choose>
				order by draft_no desc
		    ),
		    B as
		    (
		        select parent_dept_name, member_name, member_userid
		        from tbl_member m join tbl_child_dept d
		        on m.fk_child_dept_no = d.child_dept_no
		        join tbl_parent_dept p
		        on d.fk_parent_dept_no = p.parent_dept_no
		        where member_userid=#{member_userid}
		    )
		    select rownum AS rno, draft_no, draft_write_date, draft_form_type, draft_subject, draft_status, draft_file_name
		         , parent_dept_name, member_name
		    from A join B
		    on A.fk_member_userid = B.member_userid
		)
		where rno between to_number(#{startRno}) AND to_number(#{endRno})
	</select>
	
	
	<!-- ==== 총 게시물 건수 구하기 ==== -->
	<select id="getTotalCount" resultType="int" parameterType="HashMap">
		select count(*) 
		from tbl_draft
		where draft_saved = 1
		and fk_member_userid = #{member_userid}
		<choose>
			<when test="searchType == 'draft_form_type' and searchWord != ''">
				and lower(draft_form_type) like '%' || lower(#{searchWord}) ||'%'
			</when>
			<when test="searchType == 'draft_subject' and searchWord != ''">
				and lower(draft_subject) like '%' || lower(#{searchWord}) ||'%'
			</when>
			<otherwise></otherwise>
		</choose>
	</select>
	
	
	<!-- ==== 임시저장함에서 문서 클릭 후 해당 문서 내용을 불러오기 ==== -->
	<resultMap type="HashMap" id="approvalTemporaryDetail_Map">
		<result property="draft_no" 				column="draft_no" 					javaType="String" />
		<result property="fk_member_userid" 		column="fk_member_userid" 			javaType="String" />
		<result property="draft_form_type" 			column="draft_form_type" 			javaType="String" />
		<result property="draft_subject" 			column="draft_subject" 				javaType="String" />
		<result property="draft_urgent" 			column="draft_urgent" 				javaType="String" />
		<result property="draft_file_name" 			column="draft_file_name" 			javaType="String" />
		<result property="draft_file_origin_name" 	column="draft_file_origin_name" 	javaType="String" />
		<result property="draft_file_size" 			column="draft_file_size" 			javaType="String" />
		<result property="day_leave_start" 			column="day_leave_start" 			javaType="String" />
		<result property="day_leave_end" 			column="day_leave_end" 				javaType="String" />
		<result property="day_leave_cnt" 			column="day_leave_cnt" 				javaType="String" />
		<result property="day_leave_reason" 		column="day_leave_reason" 			javaType="String" />
		<result property="work_change_start" 		column="work_change_start" 			javaType="String" />
		<result property="work_change_end" 			column="work_change_end" 			javaType="String" />
		<result property="work_change_reason" 		column="work_change_reason" 		javaType="String" />
		<result property="work_change_member_workingTime" 		column="work_change_member_workingTime" 			javaType="String" />
		<result property="member_name" 				column="member_name" 			javaType="String" />
		<result property="parent_dept_name" 		column="parent_dept_name" 			javaType="String" />
		<result property="child_dept_name" 			column="child_dept_name" 			javaType="String" />
		<result property="member_position" 			column="member_position" 			javaType="String" />
	</resultMap>
	<select id="approvalTemporaryDetail" resultMap="approvalTemporaryDetail_Map" parameterType="String">
		select draft_no, fk_member_userid, draft_form_type, draft_subject, draft_urgent, draft_file_name, draft_file_origin_name, draft_file_size
		     , day_leave_start, day_leave_end, day_leave_cnt, day_leave_reason
		     , work_change_start, work_change_end, work_change_reason, work_change_member_workingTime
		     , member_name, parent_dept_name, child_dept_name, member_position
		from tbl_member M join
		(
		    select draft_no, fk_member_userid, draft_form_type, draft_subject, draft_urgent, draft_file_name, draft_file_origin_name, draft_file_size
		         , to_char(day_leave_start, 'yyyy-mm-dd') as day_leave_start , to_char(day_leave_end, 'yyyy-mm-dd') as day_leave_end, day_leave_cnt, day_leave_reason
		         , to_char(work_change_start, 'yyyy-mm-dd') as work_change_start, to_char(work_change_end, 'yyyy-mm-dd') as work_change_end, work_change_reason, work_change_member_workingTime
		    from tbl_draft D left join tbl_day_leave L
		    on D.draft_no = L.fk_draft_no
		    left join tbl_work_change C
		    on D.draft_no = C.fk_draft_no
		    where draft_no = to_number(#{draft_no})
		) D
		on M.member_userid = D.fk_member_userid
		join tbl_child_dept C 
		on M.fk_child_dept_no = C.child_dept_no
		join tbl_parent_dept P
		on C.fk_parent_dept_no = P.parent_dept_no
	</select>
	
	
	<!-- ==== 임시저장한 내용 중 결재선/참조자 목록 불러오기 ==== -->
	<resultMap type="HashMap" id="getTempApprovalRefer_Map">
		<result property="fk_member_userid" 	column="fk_member_userid" 		javaType="String" />
		<result property="approval_step" 		column="approval_step" 			javaType="String" />
	</resultMap>
	<select id="getTempApprovalRefer" resultMap="getTempApprovalRefer_Map" parameterType="String">
		select fk_member_userid, approval_step
		from tbl_approval A join ( select member_userid
		                            from tbl_member M join tbl_child_dept C
		                            on M.fk_child_dept_no = C.child_dept_no
		                            join tbl_parent_dept P
		                            on C.fk_parent_dept_no = P.parent_dept_no ) B
		on A.fk_member_userid = B.member_userid
		where fk_draft_no = to_number(#{draft_no})
	</select>
	
	
	<!-- ==== 내가 결재할 대기문서 및 결재/반려 등 처리가 된 문서 불러오기 ==== -->
	<select id="approvalPendingList" resultType="ApprovalVO" parameterType="HashMap">
		select *
		from
		(
		    with A as
		    (
		        select fk_draft_no, fk_member_userid, approval_step, approval_status
		        from tbl_approval
		        where fk_member_userid = #{member_userid}
		    ),
		    B as
		    (
		        select draft_no, draft_form_type
		             , case when length(draft_subject) > 20 then substr(draft_subject, 1, 17) || '...' else draft_subject end as draft_subject
		             , to_char(draft_write_date, 'yyyy-mm-dd') as draft_write_date, draft_status, draft_urgent, draft_file_origin_name, draft_file_name, draft_file_size
		             , member_name, parent_dept_name
		        from tbl_draft D join tbl_member M
		        on D.fk_member_userid = M.member_userid
		        join tbl_child_dept C
		        on M.fk_child_dept_no = C.child_dept_no
		        join tbl_parent_dept P
		        on C.fk_parent_dept_no = P.parent_dept_no
		    )
		    select rownum as rno, fk_draft_no, fk_member_userid, approval_step, approval_status
		         , draft_no, draft_form_type, draft_subject, draft_write_date, draft_status, draft_urgent, draft_file_origin_name, draft_file_name, draft_file_size
		         , member_name, parent_dept_name
		    from A join B
		    on A.fk_draft_no = B.draft_no
		    where approval_status != '대기'
		    order by fk_draft_no desc
		)
		where rno between to_number(1) AND to_number(10)
	</select>
	
	
	
</mapper>